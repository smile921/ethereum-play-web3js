import Ember from 'ember';

import web3 from 'ember-web3/services/web3';
import set from 'ember-metal/set';
import get from 'ember-metal/get';

export default Ember.Component.extend({

    web3: Ember.inject.service(),
    myContract:{},
    abi:{},
    code:{},

    init:function() { 
        this._super(...arguments);
        this.errors = [];            
        // var Web3 = require('web3');
        // var web3 = new Web3();
        // web3.setProvider(new web3.providers.HttpProvider("http://localhost:8545"));
         
        // solidity code code        
        let source = "" +
        "contract test {\n" +
        "   function multiply(uint a) constant returns(uint d) {\n" +
        "       return a * 7;\n" +
        "   }\n" +
        "}\n";
        let webInstance = this.get('web3.web3Instance');
        console.log(web3);
        // console.log(webInstance);
        // debugger;
        let compiled = webInstance.eth.compile.solidity(source);
        let code =  get(this,'code');
        let abi = get(this,'abi');

        code = compiled["<stdin>:test"].code;
        // contract json abi, this is autogenerated using solc CLI
        abi = compiled["<stdin>:test"].info.abiDefinition; 
        set(this,'abi',JSON.stringify(abi));
        set(this,'code',code);
        console.log('code : '+code +'   abi : '+ abi); 
          
    },

    actions:{
        // initContract: 
        compileContract:function( ) {
             
            let source = Ember.$('#contractSource').val();
            let webInstance = this.get('web3.web3Instance');            
            let compiled = webInstance.eth.compile.solidity(source);
            let code =  get(this,'code');
            let abi = get(this,'abi');
            let contractName = Ember.$('#contractName').val();
            code = compiled["<stdin>:"+contractName].code;
            
            abi = compiled["<stdin>:"+contractName].info.abiDefinition; 
            set(this,'abi',abi);
            set(this,'code',code);
            Ember.$('#iabi').val(JSON.stringify(abi));
            Ember.$('#ibin').val(code); 
        },
        createExampleContract:function() {
             
            let webInstance = this.get('web3.web3Instance');
              
            let code =  get(this,'code');
            let abi = get(this,'abi');
            let myContract = get(this,'myContract');
            let _component_this = this ;
             
            // let's assume that coinbase is our account
            webInstance.eth.defaultAccount = webInstance.eth.coinbase;
            let flag = webInstance.personal.unlockAccount(webInstance.eth.coinbase,'smile921',999);
            console.log(flag);
            // create contract 
            Ember.$('#dmsg').val('合约部署已发送，等待确认中... ');
            webInstance.eth.contract(abi).new({data: code}, function (err, contract) {
                if(err) {
                    console.error(err);
                    // debugger
                    return;
                // callback fires twice, we only want the second call when the contract is deployed
                } else if(contract.address){
                    // debugger
                    myContract = contract;
                    set(_component_this,'myContract',myContract);
                    console.log('address: ' + myContract.address);
                    Ember.$('#dmsg').val('合约部署成功！ ');
                     
                }
            });
        },
        callExampleContract: function() {
            // this should be generated by ethereum
            let param = parseInt(Ember.$('#contractParam').val());
            let myContract = get(this,'myContract');
            // debugger
            // call the contract
            let res = myContract.multiply(param);
            Ember.$('#result').val(res.toString(10));
        }
    }
});
